AWSTemplateFormatVersion: "2010-09-09"

Description:
  This template creates a CDN to host static assets

Metadata:
  Author: https://www.linkedin.com/in/jacob-foster-508280140/

Parameters:
  ClusterName:
    Type: String

  BackendLoadBalancerUrl:
    Type: String

  CertificateArn:
    Type: String
    # Must be in us-east-1
    Default: 'arn:aws:acm:us-east-1:476114146039:certificate/93093181-5707-4687-a47f-b5151fca5030'
  
  Bucket:
    Type: String

Resources:



  CloudFrontOriginAccess:
    Type: AWS::CloudFront::OriginAccessControl
    Properties: 
      OriginAccessControlConfig: 
        Description: 'Access S3 from CloudFront'
        Name: !Ref ClusterName
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CorsResponsePolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: !Sub "${ClusterName}-CORS"
        CorsConfig:
          AccessControlAllowCredentials: false
          AccessControlAllowHeaders:
            Items:
              - '*'
          AccessControlExposeHeaders:
            Items:
              - '*'
          AccessControlAllowMethods:
            Items:
              - GET
              - HEAD
              - OPTIONS
          AccessControlAllowOrigins:
            Items:
              - 'https://staging.sacredsound.app'
          OriginOverride: true

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Sid: AllowCloudFrontServicePrincipalReadOnly
          Effect: Allow
          Principal:
            Service: "cloudfront.amazonaws.com"
          Action: "s3:GetObject"
          Resource: !Sub "arn:aws:s3:::${Bucket}/*"
          Condition:
             StringEquals:
                "AWS:SourceArn": !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CDN}"

  BackendCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Comment: Caching Policy for Django Backend
        DefaultTTL: 604800
        MaxTTL: 604800
        MinTTL: 3600
        Name: !Sub "${ClusterName}-Backend"
        ParametersInCacheKeyAndForwardedToOrigin:
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          CookiesConfig:
            CookieBehavior: none
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none

  NoCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Comment: Caching Policy for Backend Proxy
        DefaultTTL: 0
        MaxTTL: 0
        MinTTL: 0
        Name: !Sub "${ClusterName}-None"
        ParametersInCacheKeyAndForwardedToOrigin:
          EnableAcceptEncodingBrotli: false
          EnableAcceptEncodingGzip: false
          CookiesConfig:
            CookieBehavior: none
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none

  IndexCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Comment: Caching Policy for SPA index
        DefaultTTL: 300
        MaxTTL: 300
        MinTTL: 300
        Name: !Sub "${ClusterName}-SPA-Index"
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingGzip: false
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none

  CDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - staging.sacredsound.app
        Comment: Staging CloudFront Distribution
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: '/'
            ErrorCachingMinTTL: 60
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: '/'
            ErrorCachingMinTTL: 60
        DefaultRootObject: 'index.html'
        DefaultCacheBehavior:
          TargetOriginId: s3-bucket
          AllowedMethods: [GET, HEAD]
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
          CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6'
          ResponseHeadersPolicyId: !Ref CorsResponsePolicy
        CacheBehaviors:
          - TargetOriginId: django-backend
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
            ViewerProtocolPolicy: redirect-to-https
            Compress: true
            OriginRequestPolicyId: '216adef6-5c7f-47e4-b989-5492eafa07d3'
            CachePolicyId: !Ref NoCachePolicy
            ResponseHeadersPolicyId: !Ref CorsResponsePolicy
            PathPattern: 'api/*'
          - TargetOriginId: s3-bucket-root
            AllowedMethods: [GET, HEAD]
            ViewerProtocolPolicy: redirect-to-https
            Compress: true
            CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6'
            ResponseHeadersPolicyId: !Ref CorsResponsePolicy
            PathPattern: 'staticfiles/*'
          - TargetOriginId: s3-bucket-root
            AllowedMethods: [GET, HEAD]
            ViewerProtocolPolicy: redirect-to-https
            Compress: true
            CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6'
            ResponseHeadersPolicyId: !Ref CorsResponsePolicy
            PathPattern: 'admin/*'
          - TargetOriginId: s3-bucket-root
            AllowedMethods: [GET, HEAD]
            ViewerProtocolPolicy: redirect-to-https
            Compress: true
            CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6'
            ResponseHeadersPolicyId: !Ref CorsResponsePolicy
            PathPattern: 'admin_sort/*'
          - TargetOriginId: s3-bucket-root
            AllowedMethods: [GET, HEAD]
            ViewerProtocolPolicy: redirect-to-https
            Compress: true
            CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6'
            ResponseHeadersPolicyId: !Ref CorsResponsePolicy
            PathPattern: 'tracks/*'
          - TargetOriginId: s3-bucket-root
            AllowedMethods: [GET, HEAD]
            ViewerProtocolPolicy: redirect-to-https
            Compress: true
            CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6'
            ResponseHeadersPolicyId: !Ref CorsResponsePolicy
            PathPattern: 'attachments/*'
          - AllowedMethods: [GET, HEAD, OPTIONS]
            CachedMethods: [GET, HEAD, OPTIONS]
            CachePolicyId: !Ref IndexCachePolicy
            PathPattern: '*index.html'
            TargetOriginId: s3-bucket
            ViewerProtocolPolicy: redirect-to-https
            OriginRequestPolicyId: '88a5eaf4-2fd4-4709-b370-b4c650ea3fcf' # AWS Managed S3 CORS
        Enabled: true
        Origins:
          - Id: django-backend
            DomainName: !Ref BackendLoadBalancerUrl
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
          - Id: s3-bucket
            DomainName: !Sub "${Bucket}.s3.amazonaws.com"
            OriginAccessControlId: !GetAtt CloudFrontOriginAccess.Id
            OriginPath: "/front/dist"
            S3OriginConfig:
              OriginAccessIdentity: ""
          - Id: s3-bucket-root
            DomainName: !Sub "${Bucket}.s3.amazonaws.com"
            OriginAccessControlId: !GetAtt CloudFrontOriginAccess.Id
            S3OriginConfig:
              OriginAccessIdentity: ""
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021

Outputs:
  Bucket:
    Value: !Ref Bucket
  DistributionId:
    Value: !Ref CDN