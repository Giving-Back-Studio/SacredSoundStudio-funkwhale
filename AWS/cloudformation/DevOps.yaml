AWSTemplateFormatVersion: 2010-09-09

Description: CFN Template to deploy a CodePipeline that tests, builds, and deploys Docker Images and a CloudFormation Stack

Parameters:

  GitSourceRepo:
    Type: String
    Description: GitHub source repository
    Default: SacredSoundStudio-funkwhale
    MinLength: 1
    MaxLength: 100
    ConstraintDescription: You must enter a GitHub repository name

  GitBranch:
    Type: String
    Default: main
    Description: GitHub git repository branch - change triggers a new build
    MinLength: 1
    MaxLength: 100
    ConstraintDescription: You must enter a GitHub repository branch name

  GitHubUser:
    Type: String
    Description: GitHub username or organization
    Default: Giving-Back-Studio
    MinLength: 3
    MaxLength: 100
    ConstraintDescription: You must enter a GitHub username or organization

Resources:

  BaseImageEcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "base-${GitBranch}"

  NginxImageEcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "nginx-${GitBranch}"

  CodePipelineArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  StaticSiteBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub 'sacredsound-funkwhale-frontend-${GitBranch}'
      AccessControl: Private
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
            AllowedOrigins:
              - 'https://staging.sacredsound.app'
            ExposedHeaders: []
            Id: allow
            MaxAge: 3000

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: codepipeline-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
              - Resource:
                  - !Sub arn:aws:s3:::${CodePipelineArtifactBucket}/*
                  - !Sub arn:aws:s3:::${StaticSiteBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${GitSourceRepo}-${GitBranch}-*"
                Effect: Allow
                Action:
                  - 'cloudformation:Describe*'
                  - 'cloudformation:Get*'
                  - 'cloudformation:Create*'
                  - 'cloudformation:Update*'
              - Resource: !Ref GitHubConnection
                Effect: Allow
                Action: 'codestar-connections:UseConnection'

  CodeBuildServiceRole:
   Type: AWS::IAM::Role
   Properties:
     Path: /
     AssumeRolePolicyDocument:
       Version: 2012-10-17
       Statement:
         - Effect: Allow
           Principal:
             Service: codebuild.amazonaws.com
           Action: sts:AssumeRole
     Policies:
       - PolicyName: root
         PolicyDocument:
           Version: 2012-10-17
           Statement:
             - Resource: '*'
               Effect: Allow
               Action:
                 - logs:CreateLogGroup
                 - logs:CreateLogStream
                 - logs:PutLogEvents
             - Resource: '*'
               Effect: Allow
               Action:
                 - ecr:GetAuthorizationToken
             - Resource: !Sub arn:aws:s3:::${CodePipelineArtifactBucket}/*
               Effect: Allow
               Action:
                 - s3:GetObject
                 - s3:PutObject
                 - s3:GetObjectVersion
             - Resource:
                 - !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${BaseImageEcrRepository}
                 - !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${NginxImageEcrRepository}
               Effect: Allow
               Action:
                 - ecr:GetDownloadUrlForLayer
                 - ecr:BatchGetImage
                 - ecr:BatchCheckLayerAvailability
                 - ecr:PutImage
                 - ecr:InitiateLayerUpload
                 - ecr:UploadLayerPart
                 - ecr:CompleteLayerUpload
             - Resource: '*'
               Effect: Allow
               Action: cloudformation:ValidateTemplate

  CodeTests:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: AWS/builds/code-tests.yaml
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: "aws/codebuild/standard:4.0"
        EnvironmentVariables:
          - Name: S3_ARTIFACT_BUCKET
            Value: !Ref CodePipelineArtifactBucket
      Name: !Sub "${GitSourceRepo}-${GitBranch}-code-tests"
      ServiceRole: !Ref CodeBuildServiceRole

  DockerBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: AWS/builds/docker-build.yaml
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: "aws/codebuild/standard:4.0"
        PrivilegedMode: True
      Name: !Sub "${GitSourceRepo}-${GitBranch}-docker-build"
      ServiceRole: !Ref CodeBuildServiceRole

  FrontendBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: AWS/builds/frontend-build.yaml
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        Type: LINUX_CONTAINER
        Image: "aws/codebuild/amazonlinux2-x86_64-standard:5.0"
      Name: !Sub "${GitSourceRepo}-${GitBranch}-frontend-build"
      ServiceRole: !Ref CodeBuildServiceRole

  GitHubConnection:
    Type: 'AWS::CodeStarConnections::Connection'
    Properties:
      ConnectionName: GitHubConnection
      ProviderType: GitHub

  CodePipelineGitHub:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactBucket
      RestartExecutionOnUpdate: true
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeStarSourceConnection
              Configuration:
                ConnectionArn: !Ref GitHubConnection
                FullRepositoryId: !Sub "${GitHubUser}/${GitSourceRepo}"
                BranchName: !Ref GitBranch
              OutputArtifacts:
                - Name: App
              RunOrder: 1
        - Name: RunCodeTests
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeTests
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: PackagedStack
              RunOrder: 1
        - Name: UpdateDevOpsStack
          Actions:
            - Name: UpdateCloudFormation
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: !Sub "${GitSourceRepo}-${GitBranch}-devops"
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
                RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/CloudFormationRole"
                TemplatePath: App::AWS/cloudformation/DevOps.yaml
                ParameterOverrides: !Sub |
                  {
                    "GitSourceRepo": "${GitSourceRepo}",
                    "GitBranch": "${GitBranch}",
                    "GitHubUser": "${GitHubUser}"
                  }
              InputArtifacts:
                - Name: App
        - Name: BuildDockerImages
          Actions:
            - Name: BuildBase
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref DockerBuild
                EnvironmentVariables: !Sub |
                  [
                    {"name": "REPOSITORY_URI", "value": "${BaseImageEcrRepository.RepositoryUri}"},
                    {"name": "DOCKER_FILE", "value": "AWS/ecs/base/Dockerfile"},
                    {"name": "CONTEXT_DIR", "value": "api"},
                    {"name": "DOCKER_BUILDKIT", "value": "1"}
                  ]
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: BaseImageJSON
              RunOrder: 1
            - Name: BuildNginx
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref DockerBuild
                EnvironmentVariables: !Sub |
                  [
                    {"name": "REPOSITORY_URI", "value": "${NginxImageEcrRepository.RepositoryUri}"},
                    {"name": "DOCKER_FILE", "value": "AWS/ecs/nginx/Dockerfile"},
                    {"name": "CONTEXT_DIR", "value": "."},
                    {"name": "DOCKER_BUILDKIT", "value": "1"}
                  ]
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: NginxImageJSON
              RunOrder: 1
            - Name: BuildFrontend
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref FrontendBuild
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: PackagedFrontend
              RunOrder: 1
        - Name: DeployApplicationStack
          Actions:
            - Name: UpdateCloudFourmation
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              InputArtifacts:
                - Name: PackagedStack
                - Name: BaseImageJSON
                - Name: NginxImageJSON
              Configuration:
                ActionMode: REPLACE_ON_FAILURE
                StackName: !Sub "${GitSourceRepo}-${GitBranch}-app"
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
                RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/CloudFormationRole"
                TemplatePath: PackagedStack::stack.yaml
                ParameterOverrides: !Sub |
                  {
                    "ClusterName": "${GitSourceRepo}-${GitBranch}",
                    "BaseImage": { "Fn::GetParam" : [ "BaseImageJSON", "imagedefinitions.json", "imageUri" ] },
                    "NginxImage": { "Fn::GetParam" : [ "NginxImageJSON", "imagedefinitions.json", "imageUri" ] },
                    "StaticSiteBucket": "${StaticSiteBucket}"
                  }
        - Name: DeployFrontend
          Actions:
            - Name: UpdateFrontend
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: 1
              InputArtifacts:
                - Name: PackagedFrontend
              Configuration:
                BucketName: !Ref StaticSiteBucket
                Extract: true

  DeveloperAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: !Sub "Allow Developer Access to the ${GitSourceRepo} project on the ${GitBranch} branch."
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'cloudformation:Describe*'
              - 'cloudformation:List*'
              - 'cloudformation:Get*'
            Resource: !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${GitBranch}-${GitSourceRepo}-*'
          - Effect: Allow
            Action:
              - 'codepipeline:Get*'
              - 'codepipeline:List*'
              - 'codepipeline:RetryStageExecution'
              - 'codepipeline:StartPipelineExecution'
              - 'codepipeline:StopPipelineExecution'
            Resource:
              - !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipelineGitHub}/*'
              - !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipelineGitHub}'
          - Effect: Allow
            Action:
              - 'codebuild:BatchGet*'
              - 'codebuild:Get*'
              - 'codebuild:List*'
            Resource:
              - !GetAtt CodeTests.Arn
              - !GetAtt DockerBuild.Arn
              - !GetAtt FrontendBuild.Arn