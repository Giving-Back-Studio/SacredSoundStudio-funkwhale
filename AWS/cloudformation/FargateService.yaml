AWSTemplateFormatVersion: 2010-09-09
Description: Builds a Fargate Service.
Parameters:
  Cluster:
    Type: String
  VPC:
    Type: AWS::EC2::VPC::Id
  SubnetA:
    Type: AWS::EC2::Subnet::Id
  SubnetB:
    Type: AWS::EC2::Subnet::Id
  ExecutionRole:
    Type: String
  TaskRole:
    Type: String
  AutoScalingRole:
    Type: String
    Default: ""
  LoadBalancer:
    Type: String
    Default: ""
  LoadBalancerSecurityGroup:
    Type: String
    Default: ""
  ContainerSecurityGroup:
    Type: String
  RDSConnectionSecret:
    Type: String
  DjangoSecretKey:
    Type: String
  RedisUrl:
    Type: String
  S3Bucket:
    Type: String
  Certificate:
    Type: String
    # Update with the certificate ARN from Certificate Manager, which must exist in the same region.
    Default: 'arn:aws:acm:us-east-2:476114146039:certificate/09f586ea-f0a8-4f39-ad4d-851f7dd5c7f3'
  Image:
    Type: String
  NginxImage:
    Type: String
    Default: ""
  ServiceName:
    Type: String
  ContainerPort:
    Type: Number
    Default: 80
  HealthCheckPath:
    Type: String
    Default: "/"
  MinContainers:
    Type: Number
    Default: 1
  MaxContainers:
    Type: Number
    Default: 10
  AutoScalingTargetValue:
    Type: Number
    Default: 50
  AutoScalingRequestCountValue:
    Type: Number
    Default: 200
  ScalingCooldownSeconds:
    Type: Number
    Default: 300
  Command:
    Type: String
  CdnId:
    Type: String
  Cpu:
    Type: Number
    Default: 256
    AllowedValues: [256, 512, 1024, 2048, 4096]
  Memory:
    Type: String
    Default: 0.5GB
    AllowedValues: [0.5GB, 1GB, 2GB, 4GB]
  EfsFileSystemId:
    Type: String
  Namespace:
    Type: String

Conditions:
  UseLoadBalancer: !Not 
    - !Equals
      - !Ref LoadBalancer
      - ""
  UseNginx: !Not 
    - !Equals
      - !Ref NginxImage
      - ""
  UseService: !Not 
    - !Equals
      - !Ref MaxContainers
      - 0
    
Resources:
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    # Makes sure the log group is created before it is used.
    DependsOn: LogGroup
    Properties:
      # Name of the task definition. Subsequent versions of the task definition are grouped together under this name.
      Family: !Sub "${ServiceName}-TaskDefinition"
      # awsvpc is required for Fargate
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
      # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
      # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
      # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
      # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
      Cpu: !Ref Cpu
      # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
      # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
      # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
      # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
      # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
      Memory: !Ref Memory
      # A role needed by ECS.
      # "The ARN of the task execution role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role."
      # "There is an optional task execution IAM role that you can specify with Fargate to allow your Fargate tasks to make API calls to Amazon ECR."
      ExecutionRoleArn: !Ref ExecutionRole
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
      TaskRoleArn: !Ref TaskRole
      Volumes:
        - Name: "efsVolume"
          EFSVolumeConfiguration:
            FilesystemId: !Ref EfsFileSystemId
            RootDirectory: "/"
            TransitEncryption: "ENABLED"
            AuthorizationConfig:
              IAM: "ENABLED"
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref Image
          Command: !Split [" ", !Ref Command]
          Environment:
            - Name: CACHE_URL
              Value: !Ref RedisUrl
            - Name: C_FORCE_ROOT
              Value: 'true'
            - Name: DJANGO_SETTINGS_MODULE
              Value: 'config.settings.aws'
            - Name: MAINTENANCE_MODE
              Value: 0
            - Name: S3_BUCKET
              Value: !Ref S3Bucket
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: CDN_ID
              Value: !Ref CdnId
            - Name: MEDIA_ROOT
              Value: ''
            - Name: STATIC_ROOT
              Value: '/staticfiles'
            - Name: MUSIC_DIRECTORY_PATH
              Value: ''
            - Name: FUNKWHALE_HOSTNAME
              Value: 'staging.sacredsound.app'
            - Name: FUNKWHALE_HOSTNAME_SUFFIX
              Value: 'sacredsound.app'
            - Name: FUNKWHALE_HOSTNAME_PREFIX
              Value: 'staging'
            - Name: FUNKWHALE_PROTOCOL
              Value: 'https'
            - Name: FUNKWHALE_URL
              Value: 'https://staging.sacredsound.app'
            - Name: TYPESENSE_API_KEY
              Value: "apikey"
            - Name: FUNKWHALE_SENTRY_DSN
              Value: "https://76e86b1b6de843608e9ea47f25ccb643@app.glitchtip.com/10060"
            - Name: FUNKWHALE_SENTRY_SR
              Value: "0.1"
          Secrets:
            - Name: DB_USERNAME
              ValueFrom: !Sub "${RDSConnectionSecret}:username::"
            - Name: DB_PASSWORD
              ValueFrom: !Sub "${RDSConnectionSecret}:password::"
            - Name: DB_HOSTNAME
              ValueFrom: !Sub "${RDSConnectionSecret}:host::"
            - Name: DJANGO_SECRET_KEY
              ValueFrom: !Sub "${DjangoSecretKey}"
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Name: external
          MountPoints:
            - SourceVolume: "efsVolume"
              ContainerPath: "/data"
          Ulimits:
            - Name: nofile
              HardLimit: 65536
              SoftLimit: 65536
          LinuxParameters:
            InitProcessEnabled: true
          # Send logs to CloudWatch Logs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
        - Fn::If:
            - UseNginx
            - Name: nginx
              Image: !Ref NginxImage
              Environment:
                - Name: MEDIA_ROOT
                  Value: '/data/media'
                - Name: MUSIC_DIRECTORY_PATH
                  Value: '/data/music'
                - Name: FUNKWHALE_HOSTNAME
                  Value: 'staging.sacredsound.app'
              DependsOn:
                - ContainerName: !Ref ServiceName
                  Condition: START
              PortMappings:
                - ContainerPort: 80
              Ulimits:
                - Name: nofile
                  HardLimit: 65536
                  SoftLimit: 65536
              LogConfiguration:
                LogDriver: awslogs
                Options:
                  awslogs-region: !Ref AWS::Region
                  awslogs-group: !Ref LogGroup
                  awslogs-stream-prefix: ecs

            - !Ref "AWS::NoValue"

  LoadBalancerWaitHandle:
    Condition: UseLoadBalancer
    DependsOn:
      - ListenerHTTPS
      - ListenerHTTP
    Type: "AWS::CloudFormation::WaitConditionHandle"

  WaitHandle:
    Type: "AWS::CloudFormation::WaitConditionHandle"

  WaitCondition:
    Type: "AWS::CloudFormation::WaitCondition"
    Properties:
      Handle: !If [UseLoadBalancer, !Ref LoadBalancerWaitHandle, !Ref WaitHandle]
      Timeout: "1"
      Count: 0

  Service:
    Type: AWS::ECS::Service
    Condition: UseService
    # This dependency is needed so that the load balancer is setup correctly in time
    DependsOn:
      - WaitCondition
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      HealthCheckGracePeriodSeconds: !If [UseLoadBalancer, 300, !Ref "AWS::NoValue"]
      LaunchType: FARGATE
      EnableExecuteCommand: true
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: !Ref Namespace
        Services:
          - PortName: external
            DiscoveryName: !Ref ServiceName
            ClientAliases:
              - DnsName: !Ref ServiceName
                Port: !Ref ContainerPort
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers: !If
        - UseNginx
        - - ContainerName: nginx
            ContainerPort: 80
            TargetGroupArn: !Ref HttpsTargetGroup
        - !Ref "AWS::NoValue"
  
  HttpsTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: UseLoadBalancer
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckTimeoutSeconds: 10
      UnhealthyThresholdCount: 3
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: "200,302"
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId: !Ref VPC

  ListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: UseLoadBalancer
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: "HTTPS"
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  ListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: UseLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref HttpsTargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref Certificate

  LogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Join ['', [/ecs/, !Ref ServiceName, TaskDefinition]]

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Condition: UseService
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join ['/', [service, !Ref Cluster, !GetAtt Service.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !Ref AutoScalingRole

  CPUAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Condition: UseService
    Properties:
      PolicyName: !Join ['', [!Ref ServiceName, CPUAutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: !Ref ScalingCooldownSeconds
        ScaleOutCooldown: !Ref ScalingCooldownSeconds
        TargetValue: !Ref AutoScalingTargetValue

  MemAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Condition: UseService
    Properties:
      PolicyName: !Join ['', [!Ref ServiceName, MemoryAutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization
        ScaleInCooldown: !Ref ScalingCooldownSeconds
        ScaleOutCooldown: !Ref ScalingCooldownSeconds
        TargetValue: !Ref AutoScalingTargetValue

  RequestAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Condition: UseLoadBalancer
    Properties:
      PolicyName: !Join ['', [!Ref ServiceName, RequestAutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ALBRequestCountPerTarget
          ResourceLabel:
            Fn::Join:
              - '/'
              - - !Select [1, !Split ["loadbalancer/", !Ref LoadBalancer]]
                - !GetAtt HttpsTargetGroup.TargetGroupFullName
        ScaleInCooldown: !Ref ScalingCooldownSeconds
        ScaleOutCooldown: !Ref ScalingCooldownSeconds
        TargetValue: !Ref AutoScalingRequestCountValue

Outputs:
  TaskDefinition:
    Description: Service Task Definition
    Value: !Ref TaskDefinition
